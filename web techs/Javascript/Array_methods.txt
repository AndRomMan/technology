Массивы как структуры данных
– добавление/удаление элементов
– перебор элементов
– мапирование (превращение одного массива в другой) (.map)
– поиск (поиск одного значения, выборка нескольких значений) (.find)
– свёртка (вычисление одного значения из всех значений массива, например, сумма) (.reduce)
– простой перебор (.forEach)
– изменение порядка элементов
– сортировка (.sort)
– разворот (.reverse)

Методы изменяющие исходный массив
– pop() — удаляет последний элемент
– push() — добавляет элемент в конец
– shift() — удаляет первый элемент
– unshift() — добавляет элемент в начало
– splice() — удаляет или заменяет несколько элементов в массиве
– sort() — сортирует массив
– reverse() — переворачивает массив

Методы не изменяющие исходный массив
– concat() — объединяет два массива
– indexOf() — возвращает индекс первого найденного элемента или -1, если элемент не
найден
– lastIndexOf() — возвращает индекс последнего найденного элемента или -1, если
элемент не найден
– join() — соединяет все элементы через разделитель. Возвращает полученную строку
– slice() — создаёт новый массив на основе некоторых элементов исходного массива


Циклические методы массива
– forEach() — выполняет функцию обратного вызова на каждом элементе массива
– map() — превращает один массив элементов в другой при помощи функции обратного вызова
– filter() — возвращает массив в котором содержаться только те элементы для которых
функция обратного вызова вернула true
– reduce() — сворачивает все элементы слева направо в  одно значение
– reduceRight() — сворачивает все элементы справа налево в одно значение

================================================================================
Перечисление - представляет собой список констант, объединенных, по одному
признаку.
Перечисления именуются с заглавной буквы. Ключи, записанные в перечисления
именуются как обычные константы — заглавными в SNAKE_CASE.

var Code = {
SUCCESS: 200,
CACHED: 302,
NOT_FOUND_ERROR: 404,
SERVER_ERROR: 500
};

================================================================================
Словарь —
(dictionary, map, associative array) структура данных,
которая используется для сопоставления одних
значений другим. Представляет собой набор пар
«ключ, значение»

– порядок элементов не имеет значения
– одно и то же значение может встречаться сколько угодно раз
– один и тот же ключ может встречаться только один раз
– элементы можно добавлять/удалять/изменять
– доступ к элементам производится по ключу
– данные могут изменяться динамически, при этом код,
который использует словарь меняться не будет
– словарь можно хранить в базе данных, в локальном хранилище, получать его любым способом и передавать как данные
– в качестве ключей можно использовать не фиксированные строки, а переменные

Именование словарей – с использованием венгерской нотации (упоминания типа
данных в названии переменной)
classListMap

================================================================================
Массивы vs. Псевдомассивы
– NodeList — структура данных для работы со списком DOM-элементов
– ClassList — структура данных для работы с набором классов DOM-элемента
– HTMLCollection — «живая» структура данных, для хранения списка элементов, она
автоматически изменяется при перестроении DOM-дерева
– Arguments — структура данных для хранения набора переданных в функцию
аргументов

Чтобы использовать методы массива (sort, slice)
на псевдомассиве, нужно сначала перевести структуру
в массив или пользоваться методами массива с подменой
контекста
Перевод в массив
– Array.from — правильный метод для создания новых массивов на основе других массивоподобных
структур
–
Вызовы методов массива через .call или .apply - но это хак!


Как фильтровать
– Добавить обработчик изменения фильтра
– Написать подходящий для фильтра итератор по структуре данных с информацией
(фотографиями, комментариями, объявлениями, товарами)
– Если речь идёт о сортировке, не забыть скопировать структуру
– Отрисовать полученные данные с помощью метода, созданного ещё в третьем
модуле

Как фильтровать
– на сервере (получение новых данных)
– на клиенте

Фильтрация на сервере
– каждый раз нужно делать новый запрос на сервер для получения полной
информации
– информация всегда актуальна
– перерисовка всех данных за один раз (даже тех, которые не изменились)
– нужно продумывать обратную связь в интерфейсе (реакция не мгновенная)
– подойдёт не для всех интерфейсов (на телефоне может быть слабый сигнал)
– появляется контроль за объёмом данных (если отрисовываем 10 фотографий, не
нужно скачивать 400)


Фильтрация на клиенте
– информация скачивается один раз (при заходе на страницу)
– информация может устареть
– можно настроить частичную перерисовку (не всегда это просто, но это не
первостепенная задача при старте проектирования)
– интерфейс реагирует «мгновенно»
– подойдёт не для всех устройств (на телефоне может быть мало оперативки)
– скачивать приходится всю информацию за один раз

Оптимизации. Прореживание слишком частых запросов на выполнение
– дебаунс (устранение «дребезга») — Выполнение только последнего запроса из
множества
«Дребезг», «Мигание»
Эффект связанный с мгновенной реакцией
на пользовательский ввод. Приводит к миганию
и нежелательному кратковременному изменению
интерфейса программы

– тротлинг (пропускание кода) — Выполнение не чаще одно раза в заданный
промежуток времени
Троттлинг или пропуск кадров
ускорение отрисовки за счет опускания отрисовки
некоторых кадров, которые пользователь
не заметит или операции в них длятся дольше, чем
интервал между кадрами
